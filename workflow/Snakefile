from pathlib import Path

configfile: "config/config.yaml"
workdir: str(Path(workflow.basedir).parent)

# preprocessing & QC
include: "rules/pre-assembly/fastqc.smk"
include: "rules/pre-assembly/fastp.smk"
include: "rules/pre-assembly/rcorrector.smk"
include: "rules/pre-assembly/sortmerna.smk"

# pooling & read normalization
include: "rules/pre-assembly/pool.smk"
include: "rules/pre-assembly/ORNA.smk"

# combined de novo assembly
include: "rules/assembly/trinity.smk"
include: "rules/assembly/transabyss.smk"
include: "rules/assembly/soapdenovotrans.smk"
include: "rules/assembly/oases.smk"

# reduction & decontamination
include: "rules/post-assembly/merge.smk"
#include: "rules/post-assembly/evigene_tr2aacds.smk"
#include: "rules/post-assembly/MCSC.smk"

# annotation & QC
#include: "rules/dammit.smk"
#include: "rules/salmon_index.smk"
#include: "rules/salmon_quant.smk"
#include: "rules/transrate.smk"

def get_all_input(_):
    data_path = f"{workflow.basedir.basedir}/{config['data_path']}" if config["data_path"] == "data" else config["data_path"]
    
    inputs = []
    species = set()
    
    # collect FastQC reports
    for path in Path(data_path).rglob("*.fastq.gz"):
        inputs.append(str(path.parent.joinpath("fastqc", "pre", path.name[:-9] + "_fastqc.html")))
        inputs.append(str(path.parent.joinpath("fastqc", "post", path.name[:-9] + "_fastqc.html")))
        
        species.add(str(path.parents[1]))
    
    for path in species:
        # collect merged assemblies
        inputs.append(path + "/pooled/merged/merged.fa")
    
    return inputs

rule all:
    input:
        get_all_input
